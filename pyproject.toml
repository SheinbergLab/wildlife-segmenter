[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "wildlife-segmenter"
version = "0.1.0"
description = "Download and segment wildlife documentaries from Internet Archive for research"
license = { text = "MIT" }
authors = [
    { name = "Research User", email = "researcher@example.com" },
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Multimedia :: Video",
]
requires-python = ">=3.9"
dependencies = [
    "requests>=2.25.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.25.0",
]
analysis = [
    "numpy>=1.21.0,<2.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0", 
    "ftfy>=6.0.0",
    "regex>=2021.0.0",
    "tqdm>=4.0.0",
    "Pillow>=8.0.0",
    "opencv-python>=4.5.0",
]
analysis-cuda118 = [
    "numpy>=1.21.0,<2.0.0",
    "torch>=2.0.0; extra == 'cu118'",
    "torchvision>=0.15.0; extra == 'cu118'", 
    "ftfy>=6.0.0",
    "regex>=2021.0.0",
    "tqdm>=4.0.0",
    "Pillow>=8.0.0",
    "opencv-python>=4.5.0",
]

[project.urls]
Homepage = "https://github.com/username/wildlife-segmenter"
Repository = "https://github.com/username/wildlife-segmenter"
Issues = "https://github.com/username/wildlife-segmenter/issues"

[project.scripts]
wildlife-segmenter = "wildlife_segmenter:main"

[tool.hatch.build.targets.wheel]
packages = ["wildlife_segmenter"]

[dependency-groups]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "flake8>=7.0.0",
    "mypy>=1.0.0",
    "types-requests>=2.25.0",
]
analysis = [
    "numpy>=1.21.0,<2.0.0",
    "torch>=2.0.0",
    "torchvision>=0.15.0", 
    "ftfy>=6.0.0",
    "regex>=2021.0.0",
    "tqdm>=4.0.0",
    "Pillow>=8.0.0",
    "opencv-python>=4.5.0",
]

[tool.black]
line-length = 100
target-version = ['py39', 'py310', 'py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--cov=wildlife_segmenter",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--strict-markers",
    "--strict-config",
]

[tool.coverage.run]
source = ["wildlife_segmenter"]
omit = [
    "tests/*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]